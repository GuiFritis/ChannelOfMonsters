//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Inputs/Gameplay.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Gameplay: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Gameplay()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Gameplay"",
    ""maps"": [
        {
            ""name"": ""Ship"",
            ""id"": ""14af707f-1162-4357-bdc5-afa28fe1736e"",
            ""actions"": [
                {
                    ""name"": ""MoveForward"",
                    ""type"": ""Button"",
                    ""id"": ""49815dec-d5c0-44f2-914f-81604cf6502e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TurnShip"",
                    ""type"": ""Button"",
                    ""id"": ""3a788d1f-de62-49f9-b575-52a29c1ee7fa"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Nitro"",
                    ""type"": ""Button"",
                    ""id"": ""46d22155-02ee-40f0-8228-6321c4bdd32c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ShootForward"",
                    ""type"": ""Button"",
                    ""id"": ""09059a09-72b0-4214-94c4-486f9b5a3671"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ShootRight"",
                    ""type"": ""Button"",
                    ""id"": ""422505d0-05fd-4272-82a1-ef8248a8cf59"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ShootLeft"",
                    ""type"": ""Button"",
                    ""id"": ""7d3b5aa4-102d-4d7d-a016-dd2ae4dbbd36"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ee11f565-5620-406d-8875-d1f53bd09d66"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveForward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""91980f3f-e1b4-4410-8dbd-d419df9a6a34"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TurnShip"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""0b8f2f4e-dfd0-43ab-87be-2faa92084e56"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TurnShip"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""89e8571c-63d8-4007-ac64-f4d1002e7fe8"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TurnShip"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""532e9777-7788-4715-a045-22c65e488801"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Nitro"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""27ee63a8-a5a4-4540-8fca-d88fd4980553"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ShootForward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7c4c16d4-5c9f-4a04-a894-6f689f6bb21e"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ShootRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a7506ed3-f59e-4a4d-badb-a9bbf0b13076"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ShootLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Ship
        m_Ship = asset.FindActionMap("Ship", throwIfNotFound: true);
        m_Ship_MoveForward = m_Ship.FindAction("MoveForward", throwIfNotFound: true);
        m_Ship_TurnShip = m_Ship.FindAction("TurnShip", throwIfNotFound: true);
        m_Ship_Nitro = m_Ship.FindAction("Nitro", throwIfNotFound: true);
        m_Ship_ShootForward = m_Ship.FindAction("ShootForward", throwIfNotFound: true);
        m_Ship_ShootRight = m_Ship.FindAction("ShootRight", throwIfNotFound: true);
        m_Ship_ShootLeft = m_Ship.FindAction("ShootLeft", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Ship
    private readonly InputActionMap m_Ship;
    private List<IShipActions> m_ShipActionsCallbackInterfaces = new List<IShipActions>();
    private readonly InputAction m_Ship_MoveForward;
    private readonly InputAction m_Ship_TurnShip;
    private readonly InputAction m_Ship_Nitro;
    private readonly InputAction m_Ship_ShootForward;
    private readonly InputAction m_Ship_ShootRight;
    private readonly InputAction m_Ship_ShootLeft;
    public struct ShipActions
    {
        private @Gameplay m_Wrapper;
        public ShipActions(@Gameplay wrapper) { m_Wrapper = wrapper; }
        public InputAction @MoveForward => m_Wrapper.m_Ship_MoveForward;
        public InputAction @TurnShip => m_Wrapper.m_Ship_TurnShip;
        public InputAction @Nitro => m_Wrapper.m_Ship_Nitro;
        public InputAction @ShootForward => m_Wrapper.m_Ship_ShootForward;
        public InputAction @ShootRight => m_Wrapper.m_Ship_ShootRight;
        public InputAction @ShootLeft => m_Wrapper.m_Ship_ShootLeft;
        public InputActionMap Get() { return m_Wrapper.m_Ship; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ShipActions set) { return set.Get(); }
        public void AddCallbacks(IShipActions instance)
        {
            if (instance == null || m_Wrapper.m_ShipActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ShipActionsCallbackInterfaces.Add(instance);
            @MoveForward.started += instance.OnMoveForward;
            @MoveForward.performed += instance.OnMoveForward;
            @MoveForward.canceled += instance.OnMoveForward;
            @TurnShip.started += instance.OnTurnShip;
            @TurnShip.performed += instance.OnTurnShip;
            @TurnShip.canceled += instance.OnTurnShip;
            @Nitro.started += instance.OnNitro;
            @Nitro.performed += instance.OnNitro;
            @Nitro.canceled += instance.OnNitro;
            @ShootForward.started += instance.OnShootForward;
            @ShootForward.performed += instance.OnShootForward;
            @ShootForward.canceled += instance.OnShootForward;
            @ShootRight.started += instance.OnShootRight;
            @ShootRight.performed += instance.OnShootRight;
            @ShootRight.canceled += instance.OnShootRight;
            @ShootLeft.started += instance.OnShootLeft;
            @ShootLeft.performed += instance.OnShootLeft;
            @ShootLeft.canceled += instance.OnShootLeft;
        }

        private void UnregisterCallbacks(IShipActions instance)
        {
            @MoveForward.started -= instance.OnMoveForward;
            @MoveForward.performed -= instance.OnMoveForward;
            @MoveForward.canceled -= instance.OnMoveForward;
            @TurnShip.started -= instance.OnTurnShip;
            @TurnShip.performed -= instance.OnTurnShip;
            @TurnShip.canceled -= instance.OnTurnShip;
            @Nitro.started -= instance.OnNitro;
            @Nitro.performed -= instance.OnNitro;
            @Nitro.canceled -= instance.OnNitro;
            @ShootForward.started -= instance.OnShootForward;
            @ShootForward.performed -= instance.OnShootForward;
            @ShootForward.canceled -= instance.OnShootForward;
            @ShootRight.started -= instance.OnShootRight;
            @ShootRight.performed -= instance.OnShootRight;
            @ShootRight.canceled -= instance.OnShootRight;
            @ShootLeft.started -= instance.OnShootLeft;
            @ShootLeft.performed -= instance.OnShootLeft;
            @ShootLeft.canceled -= instance.OnShootLeft;
        }

        public void RemoveCallbacks(IShipActions instance)
        {
            if (m_Wrapper.m_ShipActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IShipActions instance)
        {
            foreach (var item in m_Wrapper.m_ShipActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ShipActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ShipActions @Ship => new ShipActions(this);
    public interface IShipActions
    {
        void OnMoveForward(InputAction.CallbackContext context);
        void OnTurnShip(InputAction.CallbackContext context);
        void OnNitro(InputAction.CallbackContext context);
        void OnShootForward(InputAction.CallbackContext context);
        void OnShootRight(InputAction.CallbackContext context);
        void OnShootLeft(InputAction.CallbackContext context);
    }
}
